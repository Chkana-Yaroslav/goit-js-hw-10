{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\n\n\nconst datetimePicker = flatpickr(\"#datetime-picker\", {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const currentDate = new Date();\n    const currentTime = currentDate.getTime();\n    const selectedTime = selectedDate.getTime();\n\n    if (selectedTime <= currentTime) {\n      alert('Please choose a date in the future');\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n});\n\n\n\nlet countdownInterval;\n\nfunction startCountdown(countdownEndTime) {\n  countdownInterval = setInterval(() => {\n    const currentTime = new Date().getTime();\n    const timeDifference = countdownEndTime - currentTime;\n\n    if (timeDifference <= 0) {\n      clearInterval(countdownInterval);\n      alert('Countdown Finished');\n      updateInterface(0);\n      \n    } else {\n      updateInterface(timeDifference);\n      \n      document.getElementById('datetime-picker').disabled = true;\n    }\n  }, 1000);\n}\n\nfunction updateInterface(timeDifference) {\n  const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return value < 10 ? `0${value}` : value;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartButton.disabled = true;\n\nstartButton.addEventListener('click', () => {\n  const selectedDate = datetimePicker.selectedDates[0];\n  const countdownEndTime = selectedDate.getTime();\n\n  startButton.disabled = true; \n  \n  startCountdown(countdownEndTime);\n});"],"names":["startButton","datetimePicker","flatpickr","selectedDates","selectedDate","currentTime","countdownInterval","startCountdown","countdownEndTime","timeDifference","updateInterface","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"mIAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EAGnDC,EAAiBC,EAAU,mBAAoB,CACnD,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,GAE7BE,EADc,IAAI,OACQ,UACXD,EAAa,WAEdC,GAClB,MAAM,oCAAoC,EAC1CL,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,CAAC,EAID,IAAIM,EAEJ,SAASC,EAAeC,EAAkB,CACxCF,EAAoB,YAAY,IAAM,CACpC,MAAMD,EAAc,IAAI,KAAM,EAAC,QAAO,EAChCI,EAAiBD,EAAmBH,EAEtCI,GAAkB,GACpB,cAAcH,CAAiB,EAC/B,MAAM,oBAAoB,EAC1BI,EAAgB,CAAC,IAGjBA,EAAgBD,CAAc,EAE9B,SAAS,eAAe,iBAAiB,EAAE,SAAW,GAEzD,EAAE,GAAI,CACT,CAEA,SAASC,EAAgBD,EAAgB,CACvC,KAAM,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAElE,SAAS,cAAc,aAAa,EAAE,YAAcO,EAAeL,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAeJ,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcI,EAAeH,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAeF,CAAO,CAC/E,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,CACpC,CAEA,SAASF,EAAUG,EAAI,CAMrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAd,EAAY,SAAW,GAEvBA,EAAY,iBAAiB,QAAS,IAAM,CAE1C,MAAMQ,EADeP,EAAe,cAAc,GACZ,UAEtCD,EAAY,SAAW,GAEvBO,EAAeC,CAAgB,CACjC,CAAC"}